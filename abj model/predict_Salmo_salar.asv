function [prdData, info] = predict_Salmo_salar(par, data, auxData)
  
  % unpack par, data, auxData
  cPar = parscomp_st(par); vars_pull(par); 
  vars_pull(cPar);  vars_pull(data);  vars_pull(auxData);
  
      filterChecks = E_Hh > E_Hb;
%                      f1>1 || f1 <0 || ...
%                      f2>1 || f2 <0 || ...
%                      f3>1 || f3 <0 || ...
%                      s_shrink < 0 || s_shrink > 1e6 || ...
%                      L_init < 0 || L_init > L_m * 43 || L_init^3 > 0.9 * 0.35 || ...
%                      E_R_init < 0 || w_E/ mu_E/ d_E * E_R_init > 0.8 * 0.35; 
  
  if filterChecks  
    info = 0;
    prdData = {};
    return;
  end  

%   % customized filters for allowable parameters of the standard DEB model (std)
%   % for other models consult the appropriate filter function.
%   pars_tj = [g; k; l_T; v_Hb; v_Hj; v_Hp];
%   [t_j, t_p, t_b, l_j, l_p, l_b, l_i, rho_j, rho_B, info] = get_tj(pars_tj, f_tL);
%   if info ~= 1 % numerical procedure failed
%       fprintf('warning: invalid parameter value combination for get_tj \n')
%   end
%   s_M = l_j / l_b;
%   filterChecks = k * v_Hp >= f_tL ^3 * s_M^3  || ...         % constraint required for reaching puberty with f_tL
%   
%   if filterChecks  
%     info = 0;
%     prdData = {};
%     return;
%   end  

  % compute temperature correction factors
  TC_Tah = tempcorr(Tah(:,1), T_ref, T_A);
  TC_Tab = tempcorr(Tab(:,1), T_ref, T_A);
  TC_aj = tempcorr(temp.aj, T_ref, T_A);
  TC_ap = tempcorr(temp.ap, T_ref, T_A);
  TC_am = tempcorr(temp.am, T_ref, T_A);
  TC_Ri = tempcorr(temp.Ri, T_ref, T_A);
  TC_tL = tempcorr(temp.tL, T_ref, T_A);
  
  % zero-variate data

  % life cycle
  pars_tj = [g; k; l_T; v_Hb; v_Hj; v_Hp];
  [tau_j, tau_p, tau_b, l_j, l_p, l_b, l_i, rho_j, rho_B, info] = get_tj(pars_tj, f);
  if info ~= 1 % numerical procedure failed
     fprintf('warning: invalid parameter value combination for get_tj \n')
  end
  
  % initial
  pars_UE0 = [V_Hb; g; k_J; k_M; v]; % compose parameter vector
  U_E0 = initial_scaled_reserve(f, pars_UE0); % d.cm^2, initial scaled reserve
  E_0 = p_Am * U_E0;            % J, initial energy content
  Wd_0 = E_0 * w_E/ mu_E;      % g, initial dry weight 
  V_0 = Wd_0/ d_E;             % cm^3, egg volume 
  
  % hatch   
  [U_H aUL] = ode45(@dget_aul, [0; U_Hh; U_Hb], [0 U_E0 1e-10], [], kap, v, k_J, g, L_m);
% a_h = aUL(2,1); aT_h = a_h/ TC_ah; % d, age at hatch at f and T
  L_h = aUL(2,3); % cm, structural length at birth at f
  Lw_h = L_h / del_M;  % cm, structural length at birth at f
  Ww_h = L_h^3 * (1 + f * ome);       % g, wet weight at hatching at f 

  % birth
  L_b = L_m * l_b;                  % cm, structural length at birth at f
  Lw_b = L_b/ del_M;                % cm, physical length at birth at f
  Ww_b = L_b^3 * (1 + f * ome);       % g, wet weight at birth at f 
% aT_b = tau_b/ k_M/ TC_ab;           % d, age at birth at f and T

  % metamorphosis
  L_j = L_m * l_j;                  % cm, structural length at metam
  Lw_j = L_j/ del_M;                % cm, physical length at metam at f
  Ww_j = L_j^3 * (1 + f * ome);       % g, wet weight at metam
  % tT_j = (tau_j - tau_b) / k_M/ TC_tj;  % d, time since birth at metam
  aT_j = (tau_j - tau_b) / k_M/ TC_aj + tau_b/ k_M/ TC_aj;  % d, age at metam
 
  % puberty 
  L_p = L_m * l_p;                  % cm, structural length at puberty at f
  Lw_p = L_p/ del_M;                % cm, physical length at puberty at f
  Ww_p = L_p^3 *(1 + f * ome);        % g, wet weight at puberty 
  % tT_p = (tau_p - tau_b)/ k_M/ TC_tp;   % d, time since birth at puberty at f and T
  aT_p = (tau_j - tau_b) / k_M/ TC_ap + tau_b/ k_M/ TC_ap + (tau_p - tau_b)/ k_M/ TC_ap;   % d, age at puberty at f and T

  % ultimate
  L_i = L_m * l_i;                  % cm, ultimate structural length at f
  Lw_i = L_i/ del_M;                % cm, ultimate physical length at f
  Ww_i = L_i^3 * (1 + f * ome);       % g, ultimate wet weight 
 
  % reproduction
  pars_R = [kap, kap_R, g, k_J, k_M, L_T, v, U_Hb, U_Hj, U_Hp];
  [R_i, UE0, Lb, Lj, Lp, info]  =  reprod_rate_j(L_i, f, pars_R, L_b);
  RT_i = TC_Ri * R_i;% #/d, max reprod rate

  % life span
  pars_tm = [g; l_T; h_a/ k_M^2; s_G];  % compose parameter vector at T_ref
  t_m = get_tm_s(pars_tm, f, l_b);      % -, scaled mean life span at T_ref
  aT_m = t_m/ k_M/ TC_am;               % d, mean life span at T
  
  % pack to output
% prdData.ah = aT_h;
% prdData.ab = aT_b;
% prdData.tj = tT_j;
  prdData.aj = aT_j;
% prdData.tp = tT_p;
  prdData.ap = aT_p;
  prdData.am = aT_m;
  prdData.Lh = Lw_h;
  prdData.Lb = Lw_b;
  prdData.Lj = Lw_j;
% prdData.Lp = Lw_p;
  prdData.Li = Lw_i;
  prdData.V0 = V_0;
  prdData.Wd0 = Wd_0;
  prdData.Wwh = Ww_h;
  prdData.Wwb = Ww_b;
  prdData.Wwj = Ww_j;
% prdData.Wwp = Ww_p;
  prdData.Wwi_F = Ww_i;
  prdData.E0 = E_0;
  prdData.Ri = RT_i;
  
  % uni-variate data
  
  % time-length 
  F = f_tL; 
  [tau_j, tau_p, tau_b, l_j, l_p, l_b, l_i, rho_j, rho_B, info] = get_tj(pars_tj, F);
  rT_B = TC_tL * rho_B * k_M;  % 1/d, von Bert growth rate   
  rT_j = TC_tL * rho_j * k_M;  % 1/d, exponential growth rate
  aT_b = tau_b/ k_M/ TC_tL; aT_j = tau_j/ k_M/ TC_tL;   
  tau_j = aT_j - aT_b; % time since birth at metamorphosis
  t_bj = tL(tL(:,1) < tau_j,1); % select times between birth & metamorphosis   
  Lw_b = l_b * L_m/ del_M; 
  Lw_j = l_j * L_m/ del_M; 
  Lw_i = l_i * L_m/ del_M;
  EL_bj = Lw_b * exp(t_bj * rT_j/3); % exponential growth as V1-morph
  t_ji = tL(tL(:,1) >= tau_j,1); % selects times after metamorphosis
  EL_ji = Lw_i - (Lw_i - Lw_j) * exp( - rT_B * (t_ji - tau_j)); % cm, expected length at time
  ELw = [EL_bj; EL_ji]; % catenate lengths
  
  % length-weight
  EWw_parrs = (LWw_parrs(:,1) * del_M).^3 * (1 + f_LWw_parrs * ome); % g, wet weight
  EWw_spawners = (LWw_spawners(:,1) * del_M).^3 * (1 + f_LWw_spawners * ome); % g, wet weight

  % temperature-age at hatching
  Eah = aUL(2,1) ./ TC_Tah; % d, time at hatch
  
  % temperature-age at birth
  Eab = tau_b/ k_M ./ TC_Tab;        % d, age at birth at f and T
  
  % L-N data for females
  f = f1;
  pars_UE0 = [V_Hb; g; k_J; k_M; v];
  U_E0 = initial_scaled_reserve(f, pars_UE0); % cm d^-1, initial scaled reserve
  E_0  = U_E0 * p_Am; % J, energy in egg
  E_init    = f * E_m * L_init^3; % J, initial energy in the body

  InitCond = [L_init; E_init; E_Hp; E_R_init; 0]; % concatenate initial conditions
  
  s_M  = L_j/ L_b; % -, acceleration factor
  TC = TC_tN;
  time = tN1(:,1); % d, time
  
[t, LEHR] = ode45(@ode_LEHR, time, InitCond,[], par, cPar, f, s_M, TC);
  % unpack vars:
  L    = LEHR(:,1);
  E    = LEHR(:,2);
  E_R  = LEHR(:,4);
  E_R1 = LEHR(:,5);
  % output
  EN1   = E_R1/ E_0; % # cum nb eggs
  EWw1  = L.^3 + w_E/ mu_E/ d_E * (E + E_R); % g, total wet weight
 
  
  % first two days, no fasting:
  [t, LEHR] = ode45(@ode_LEHR, [time(time<3);3+1e-5], InitCond,[], par, cPar, f, s_M, TC);
  L    = LEHR(1:end-1,1);
  E    = LEHR(1:end-1,2);
  E_R  = LEHR(1:end-1,4);
  E_R1 = LEHR(1:end-1,5);
  
  EN_1    = E_R1/ E_0; % # cum nb eggs
  EWw_1   = L.^3 + w_E/ mu_E/ d_E * (E + E_R); % g, total wet weight
 
   % rest of the time fasting:
  [t, LEHR] = ode45(@ode_LEHR, [3+1e-5;time(time>=3)], LEHR(end,:),[], par, cPar, 0, s_M, TC);  
  LEHR(1,:) = []; % remove dummy time  
  % unpack vars:  
  L    = LEHR(:,1);
  E    = LEHR(:,2);
  E_R  = LEHR(:,4);
  E_R1 = LEHR(:,5);
  
  EN_2   = E_R1/ E_0; % # cum nb eggs
  EWw_2  = L.^3 + w_E/ mu_E/ d_E * (E + E_R); % g, total wet weight  
   EN0    = [EN_1; EN_2]; % #, cum number of eggs
   EWw0   = [EWw_1; EWw_2]; % #, wet weight at beginning and end of the experiment

  
  % pack to output
  prdData.tL = ELw;
  prdData.LWw_parrs = EWw_parrs;
  prdData.LWw_spawners = EWw_spawners;
  prdData.Tah = Eah;
  prdData.Tab = Eab;
